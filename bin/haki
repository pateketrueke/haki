#!/bin/sh
':' // ; exec "$(command -v nodejs || command -v node)" "$0" "$@"
;

'use strict';

/* eslint-disable global-require */

const $ = require('wargs')(process.argv.slice(2));

const thisPkg = require('../package.json');

const cleanStack = require('clean-stack');
const findup = require('findup-sync');
const chalk = require('chalk');
const path = require('path');

let _task = $._.shift() || 'default';

const _ = require('./lib/util');
const _bin = path.basename(thisPkg.bin);

function padding(value, max) {
  return `${value}${new Array(value.length + max).join(' ')}`.substr(0, max);
}

function showHelp(tasks) {
  _.echo(`  Usage:\n    ${_bin} COMMAND [...]\n`);

  /* istanbul ignore else */
  if (tasks.length) {
    tasks.forEach(params => {
      _.echo(`    ${_bin} ${padding(params.name, 20)}  # ${params.task.description || ''}\n`);
    });
  }
}

const Haki = require('../lib');
const haki = new Haki($.flags);

try {
  const Hakifile = findup('Hakifile.*', { nocase: true });

  /* istanbul ignore else */
  if (Hakifile) {
    try {
      require(Hakifile)(haki);
    } catch (e) {
      _.echo(chalk.red(`Wrong '${Hakifile}': ${e.message}`), '\n');
      _.die(1);
    }
  }
} catch (e) {
  _.echo(chalk.red(($.flags.debug && cleanStack(e.stack)) || e.message), '\n');
  _.die(1);
}

/* istanbul ignore else */
if ($.flags.version) {
  _.echo(chalk.green(`${thisPkg.name} v${thisPkg.version}`), '\n');
  _.die();
}

/* istanbul ignore else */
if ($.flags.help) {
  showHelp(haki.getGeneratorList());
  _.die();
}

if (haki.hasGenerator(_task)) {
  haki.runGenerator(_task, _.merge({}, $.data, $.params))
    .catch(e => {
      _.echo(chalk.red(($.flags.debug && cleanStack(e.stack)) || e.message), '\n');
      _.die(1);
    });
} else {
  _.echo(chalk.red(`Missing '${_task}' generator`), '\n');
  _.die(1);
}

process.on('SIGINT', () => process.exit());
