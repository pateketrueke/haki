#!/bin/sh
':' // ; exec "$(command -v nodejs || command -v node)" "$0" "$@"
;

'use strict';

/* eslint-disable global-require */

const $ = require('wargs')(process.argv.slice(2), {
  aliases: {
    f: 'force',
    v: 'version',
    d: 'debug',
    q: 'quiet',
    h: 'help',
  },
});

const thisPkg = require('../package.json');

const cleanStack = require('clean-stack');
const chalk = require('chalk');
const path = require('path');
const fs = require('fs');

const CLR = '\x1b[K';

let _task = $._.shift() || 'default';

const _ = require('./lib/util');
const _bin = path.basename(thisPkg.bin);

function padding(value, max) {
  return `${value}${new Array(value.length + max).join(' ')}`.substr(0, max);
}

function showHelp(tasks) {
  _.echo(`  Usage:\n    ${_bin} COMMAND [...]\n`);

  /* istanbul ignore else */
  if (tasks.length) {
    tasks.forEach(params => {
      _.echo(`    ${_bin} ${padding(params.name, 20)}`,
        `  # ${params.task.description || ''}\n`);
    });
  }

  _.echo(`
  Options:
    -f, [--force]        # Overwrite files that already exist
    -v, [--version]      # Print version and quit
    -d, [--debug]        # Print stack on error
    -q, [--quiet]        # Supress status output
    -h, [--help]         # Show this help message
`);
}

/* istanbul ignore else */
if ($.flags.version) {
  _.echo(chalk.yellow(`${thisPkg.name} v${thisPkg.version}`), '\n');
  _.die();
}

_.echo(chalk.gray('↺ Finding Hakifile(s) ...\r'));

const Haki = require('../lib');
const haki = new Haki($.flags);

// built-in generators
require('./Hakifile')(haki);

// partial impl from `rc`
const win = process.platform === 'win32';
const cwd = process.cwd();
const etc = '/etc';

const home = win
  ? process.env.USERPROFILE
  : process.env.HOME;

const CONFIG = {};
const CACHE = [];

let depth = 20;
let pwd = cwd;

function load(filepath) {
  /* istanbul ignore else */
  if (CACHE.indexOf(filepath) > -1) {
    return;
  }

  try {
    /* istanbul ignore else */
    if (fs.existsSync(filepath)) {
      if (fs.statSync(filepath).isDirectory()) {
        const Hakifile = fs.readdirSync(filepath)
          .filter(file => file.indexOf('Hakifile') > -1);

        /* istanbul ignore else */
        if (Hakifile.length) {
          require(path.join(filepath, Hakifile[0]))(haki);
          CACHE.push(filepath);
        }
      } else {
        _.merge(CONFIG, JSON.parse(fs.readFileSync(filepath).toString()));
      }
    }
  } catch (e) {
    _.echo(chalk.red(`✗ Wrong '${filepath}': ${($.flags.debug && cleanStack(e.stack)) || e.message}`), CLR, '\n');
    _.die(1);
  }
}

load(path.join(etc, '.config', thisPkg.name));
load(path.join(etc, `.${thisPkg.name}rc`));

load(path.join(home, '.config', thisPkg.name));
load(path.join(home, `.${thisPkg.name}rc`));

while (depth--) {
  load(path.join(pwd, '.config', thisPkg.name));
  load(path.join(pwd, `.${thisPkg.name}rc`));
  load(pwd);

  pwd = path.dirname(pwd);

  /* istanbul ignore else */
  if (pwd === '/' || pwd === home) {
    break;
  }
}

_.echo(chalk.green(`✔ ${CACHE.length} Hakifile${CACHE.length === 1 ? '' : 's'} found`), CLR, '\n');

/* istanbul ignore else */
if ($.flags.help) {
  showHelp(haki.getGeneratorList());
  _.die();
}

_.echo(chalk.gray(`Haki v${thisPkg.version} (${_task})`), CLR, '\n');

if (haki.hasGenerator(_task)) {
  haki.runGenerator(_task, _.merge({}, $.data, $.params, CONFIG))
    .catch(e => {
      _.echo(chalk.red(($.flags.debug && cleanStack(e.stack)) || e.message), '\n');
      _.die(1);
    });
} else {
  _.echo(chalk.red(`✗ Missing '${_task}' generator`), CLR, '\n');
  _.die(1);
}

process.on('SIGINT', () => process.exit());
